package com.jihoon.mybbs.model;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

// mvp에서 p를 작업중.

public class BbsLoader {
		final String DATABASE_NAME = "mybbs.db";
		final String DATABASE_DIR = "c:/temp/mybbs/";
		final String COLUMN_SEPERATOR = "^^"; //한칸 단위
		final String RECORD_SEPERATOR = "\n"; //한줄 단위
	/*
	 *   저장소에서 데이터를 읽어옴
	 *   @return -> 반환값에 대한 설명을 쓰자
	 */
	
	public String read(){
		// 데이터 베이스를 읽어서 나에게 넘겨준다 -> 리턴 값이 있다는 뜻.
		String result = "";
		
		//TODO -> 오른쪽에 파란색 마킹됨 -> 앞으로 할 일 의미.
		
		return result;
	}
	
	/*
	 * 저장소에 데이터를 저장
	 * @param bbs -> value 텍스트 데이터랍니다.
	 */
	
	public void write(Bbs bbs){
		// bbs에 있는 데이터를 텍스트 파일에 저장한다.
		// 1. 디렉토리가 있는지 검사
		File dir = new File(DATABASE_DIR);
		if(!dir.exists()){
			dir.mkdirs(); // 검사한 경로상의 모든 디렉토리를 생성해준다.
		}
		
		// 1.1 파일이 있는지 검사하고 없으면 생성
		File database = new File(DATABASE_DIR+DATABASE_NAME);
		if(!database.exists()){
			try{
				database.createNewFile();
			}catch (IOException e){
				e.printStackTrace();
			}
		}
		// 2. bbs에 내용을 database 파일에 저장을 한다.
		// 2.1   저장하는 데이터의 구조를 설계해야 한다.
		// 2.1.1 구분자를 정의한다. ;^^;
		
		// 2.2 bbs의 내용을 횡으로 펼친다.
		String oneData = bbs.getId() + COLUMN_SEPERATOR
				+ bbs.getTitle() + COLUMN_SEPERATOR
				+ bbs.getAuthor() + COLUMN_SEPERATOR
				+ bbs.getDate() + COLUMN_SEPERATOR
				+ bbs.getView() + COLUMN_SEPERATOR
				+ bbs.getContent() + COLUMN_SEPERATOR;
		
		//3. 횡으로 펼쳐진 데이터를 파일의 제일 마지막줄에 저장한다.
		//3.1 FileWriter 객체를 사용해서 기존 데이터에 계속 더해 쓴다.
		Path path = Paths.get(DATABASE_DIR, DATABASE_NAME);
		
		try{
			FileWriter writer = new FileWriter(database, true); // 두번째 인자가 append
			writer.append(oneData);
			writer.close();
		}catch(IOException e){
			e.printStackTrace();
		}
		
	}
}
